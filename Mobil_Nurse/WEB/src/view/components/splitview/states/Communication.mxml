<?xml version="1.0" encoding="utf-8"?>
<s:View xmlns:fx="http://ns.adobe.com/mxml/2009"
		xmlns:s="library://ns.adobe.com/flex/spark"
		xmlns:assets="assets.*"
		creationComplete="register()" 
		title="Communication"
		xmlns:mx="http://www.adobe.com/2009/mxml">
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	
	<fx:Script>
		<![CDATA[
			import control.events.CheckBoxEvent;
			import control.events.StateTextFieldEvent;
			
			import mx.events.FlexEvent;
			
			public static const CHECK_EYE:String = "CheckEye";
			public static const CHECK_EAR:String = "CheckEar";
			public static const CHECK_SPEAK:String = "CheckSpeak";
			public static const CHECK_HAND:String = "CheckHand";
			public static const CHECK_PENCIL:String = "CheckPencil";
			
			public static const SET_PROBLEMS_EYE:String = "SetProbemsEye";
			public static const SET_PROBLEMS_EAR:String = "SetProbemsEar";
			public static const SET_PROBLEMS_SPEAK:String = "SetProbemsSpeak";
			public static const SET_PROBLEMS_HAND:String = "SetProbemsHand";
			public static const SET_PROBLEMS_PENCIL:String = "SetProbemsPencil";
			
			public static const SET_SOLUTIONS_EYE:String = "SetSolutionsEye";
			public static const SET_SOLUTIONS_EAR:String = "SetSolutionsEar";
			public static const SET_SOLUTIONS_SPEAK:String = "SetSolutionsSpeak";
			public static const SET_SOLUTIONS_HAND:String = "SetSolutionsHand";
			public static const SET_SOLUTIONS_PENCIL:String = "SetSolutionsPencil";
			
			public static const SET_TOOLS_EYE:String = "SetToolsEye";
			public static const SET_TOOLS_EAR:String = "SetToolsEar";
			public static const SET_TOOLS_SPEAK:String = "SetToolsSpeak";
			public static const SET_TOOLS_HAND:String = "SetToolsHand";
			public static const SET_TOOLS_PENCIL:String = "SetToolsPencil";
			
			public static const GET_PROBLEM_FIELDS:String = "GetProblemFields";
			public static const GET_SOLUTION_FIELDS:String = "GetSolutionFields";
			public static const GET_TOOL_FIELDS:String = "GetToolFields";
			
			private function register():void {
				AppFacade.getInstance().removeMediator( CommunicationMediator.NAME );
				AppFacade.getInstance().registerMediator( new CommunicationMediator(this) );
				backgroundImage.visible = true;
				this.setElementIndex(back, 0);
			}
			
			
			protected function checkEye(event:MouseEvent):void
			{
				dispatchEvent( new CheckBoxEvent( CHECK_EYE , this.check_eye.selected));
			}
			
			protected function checkEar(event:MouseEvent):void
			{
				dispatchEvent( new CheckBoxEvent( CHECK_EAR , this.check_ear.selected ));
			}
			
			protected function checkSpeak(event:MouseEvent):void
			{
				dispatchEvent( new CheckBoxEvent( CHECK_SPEAK, this.check_speak.selected));	
			}
			
			protected function checkHand(event:MouseEvent):void
			{
				dispatchEvent( new CheckBoxEvent( CHECK_HAND, this.check_hand.selected));				
			}
			
			protected function checkPencil(event:MouseEvent):void
			{
				dispatchEvent( new CheckBoxEvent( CHECK_PENCIL, this.check_pencil.selected ));
			}
			
			//init
			protected function initProblemTextFields(event:FlexEvent):void
			{
				dispatchEvent( new Event( GET_PROBLEM_FIELDS ) );
			}
			
			protected function initSolutionTextFields(event:FlexEvent):void
			{
				dispatchEvent( new Event( GET_SOLUTION_FIELDS ) );	
			}
			
			protected function initToolTextFields(event:FlexEvent):void
			{
				dispatchEvent( new Event( GET_TOOL_FIELDS ) );
			}
			
			// setter
			protected function setProblemsEye(event:KeyboardEvent):void
			{
				dispatchEvent( new StateTextFieldEvent( SET_PROBLEMS_EYE, this.problemsEye));	
			}
			
			protected function setProblemsEar(event:KeyboardEvent):void
			{
				dispatchEvent( new StateTextFieldEvent( SET_PROBLEMS_EAR, this.problemsEar));
			}
			
			protected function setProblemsSpeak(event:KeyboardEvent):void
			{
				dispatchEvent( new StateTextFieldEvent( SET_PROBLEMS_SPEAK, this.problemsSpeak));				
			}
			
			protected function setProblemsHand(event:KeyboardEvent):void
			{
				dispatchEvent( new StateTextFieldEvent( SET_PROBLEMS_HAND, this.problemsHand));				
			}
			
			protected function setProblemsPencil(event:KeyboardEvent):void
			{
				dispatchEvent( new StateTextFieldEvent( SET_PROBLEMS_PENCIL, this.problemsPencil));
			}
			
			protected function setSolutionsEye(event:KeyboardEvent):void
			{
				dispatchEvent( new StateTextFieldEvent( SET_SOLUTIONS_EYE, this.solutionEye));
			}
			
			protected function setSolutionsSpeak(event:KeyboardEvent):void
			{
				dispatchEvent( new StateTextFieldEvent( SET_SOLUTIONS_SPEAK, this.solutionSpeak));
			}
			
			protected function setSolutionsEar(event:KeyboardEvent):void
			{
				dispatchEvent( new StateTextFieldEvent( SET_SOLUTIONS_EAR, this.solutionEar));
			}
			
			protected function setSolutionsHand(event:KeyboardEvent):void
			{
				dispatchEvent( new StateTextFieldEvent( SET_SOLUTIONS_HAND, this.solutionHand));
			}
			
			protected function setSolutionsPencil(event:KeyboardEvent):void
			{
				dispatchEvent( new StateTextFieldEvent( SET_SOLUTIONS_PENCIL, this.solutionPencil));
			}
			
			protected function setToolsEye(event:KeyboardEvent):void
			{
				dispatchEvent( new StateTextFieldEvent( SET_TOOLS_EYE, this.toolsEye));
			}
			
			protected function setToolsSpeak(event:KeyboardEvent):void
			{
				dispatchEvent( new StateTextFieldEvent( SET_TOOLS_SPEAK, this.toolsSpeak));
			}
			
			protected function setToolsEar(event:KeyboardEvent):void
			{
				dispatchEvent( new StateTextFieldEvent( SET_TOOLS_EAR, this.toolsEar));
			}
			
			protected function setToolsHand(event:KeyboardEvent):void
			{
				dispatchEvent( new StateTextFieldEvent( SET_TOOLS_HAND, this.toolsHand));
			}
			
			protected function setToolsPencil(event:KeyboardEvent):void
			{
				dispatchEvent( new StateTextFieldEvent( SET_TOOLS_PENCIL, this.toolsPencil));
			}
			
		]]>
	</fx:Script>
	
	<s:states>
		<s:State name="ressourcen" id="ressourcen"/>
		<s:State name="problems" id="problems" enterState="initProblemTextFields(event)"/>
		<s:State name="solutions" id="solutions" enterState="initSolutionTextFields(event)"/>
		<s:State name="tools" id="tools" enterState="initToolTextFields(event)"/>
	</s:states>
	
	<s:Group id="back"
			 height.problems="660"
			 height.ressourcen="660"
			 height.solutions="660"
			 height.tools="660">
		<s:BitmapImage id="backgroundImage" visible="false" left="0" right="0" top="0" bottom="0"
					   depth="0" smooth="true" source="@Embed('assets/ruledpaperwithheader.png')"/>
		<s:VGroup includeIn="problems" x="30" y="116" width="690" height="356"
				  contentBackgroundAlpha="0">
			<s:HGroup width="690">
				<s:Image source="assets/eye.png"/>
				<s:Spacer width="70" height="10"/>
				<s:TextArea
					verticalCenter="0" horizontalCenter="0" verticalAlign="top"
					id="problemsEye" width="573" height="78" keyUp="setProblemsEye(event)" skinClass="skins.CustomTextAreaSkin" 
							/>
			</s:HGroup>
			
			<s:HGroup width="478">
				<s:Image source="assets/mouth.png"/>
				<s:TextArea id="problemsSpeak" width="214" height="51" keyUp="setProblemsSpeak(event)"/>
			</s:HGroup>
			<s:HGroup width="479">
				<s:Image source="assets/ear.png"/>
				<s:TextArea id="problemsEar" width="214" height="51" keyUp="setProblemsEar(event)"/>
			</s:HGroup>
			
			<s:HGroup width="478">
				<s:Image source="assets/hand.png"/>
				<s:TextArea id="problemsHand" width="214" height="51" keyUp="setProblemsHand(event)"/>
			</s:HGroup>
			
			<s:HGroup width="478">
				<s:Image includeIn="problems" source="assets/pencil.png"/>
				<s:TextArea id="problemsPencil" width="214" height="51" keyUp="setProblemsPencil(event)"/>
			</s:HGroup>
		</s:VGroup>
	</s:Group>
	
	<s:HGroup y="25" width="550" height="26" x="35" horizontalCenter="-90">
		<s:Label fontSize="22" text="Ressourcen" paddingLeft="10" paddingRight="10"
				 click="currentState='ressourcen'" backgroundColor.ressourcen="#EFEFEF"/>
		
		<s:Label fontSize="22" text="Problems" paddingLeft="10" paddingRight="10"
				 click="currentState='problems'" backgroundColor.problems="#EFEFEF" />
		
		<s:Label fontSize="22" text="Solutions" paddingLeft="10" paddingRight="10"
				 click="currentState='solutions'" backgroundColor.solutions="#EFEFEF"/>
		<s:Label fontSize="22" text="Tools" paddingLeft="10" paddingRight="10"
				 click="currentState='tools'" backgroundColor.tools="#EFEFEF"/>
	</s:HGroup>

	<s:Group includeIn="ressourcen" x="0" y="0" width="100%" height="663">
		
		<s:Group x="40" y="121" width="671" height="509">
			<s:HGroup x="0" y="153" width="671" height="42">
				<s:Spacer width="200" height="10"/>
				<s:CheckBox click="checkEar(event)" id="check_ear"/>
				<s:Spacer width="200" height="10"/>
				<s:Image source="assets/ear.png"/>
			</s:HGroup>
			<s:HGroup x="0" y="79" width="671" height="36">
				<s:Spacer width="200" height="10"/>
				<s:CheckBox click="checkSpeak(event)" id="check_speak"/>
				<s:Spacer width="200" height="10"/>
				<s:Image source="assets/mouth.png"/>
			</s:HGroup>
			<s:HGroup x="0" y="-1" width="671" height="35">
				<s:Spacer width="200" height="10"/>
				<s:CheckBox click="checkEye(event)" id="check_eye"/>
				<s:Spacer width="200" height="10"/>
				<s:Image source="assets/eye.png"/>
			</s:HGroup>
			<s:HGroup x="0" y="232" width="671" height="39">
				<s:Spacer width="200" height="10"/>
				<s:CheckBox id="check_hand" click="checkHand(event)"/>
				<s:Spacer width="200" height="10"/>
				<s:Image source="assets/hand.png"/>
			</s:HGroup>
			<s:HGroup x="0" y="308" width="671" height="39">
				<s:Spacer width="200" height="10"/>
				<s:CheckBox id="check_pencil" click="checkPencil(event)"/>
				<s:Spacer width="200" height="10"/>
				<s:Image source="assets/pencil.png"/>
			</s:HGroup>
		</s:Group>
		
	</s:Group>
	
	<s:VGroup includeIn="solutions" x="16" y="132" width="478">
		<s:HGroup width="479">
			<s:Image source="assets/eye.png"/>
			<s:TextArea id="solutionEye" width="214" height="55" keyUp="setSolutionsEye(event)"/>
		</s:HGroup>
		
		<s:HGroup width="479">
			<s:Image source="assets/mouth.png"/>
			<s:TextArea id="solutionEar" width="214" height="51" keyUp="setSolutionsSpeak(event)"/>
		</s:HGroup>
		
		<s:HGroup width="478">
			<s:Image source="assets/ear.png"/>
			<s:TextArea id="solutionSpeak" width="214" height="51" keyUp="setSolutionsEar(event)"/>
		</s:HGroup>
		
		<s:HGroup width="478">
			<s:Image source="assets/hand.png"/>
			<s:TextArea id="solutionHand" width="214" height="51" keyUp="setSolutionsHand(event)"/>
		</s:HGroup>
		
		<s:HGroup width="478">
			<s:Image source="assets/pencil.png"/>
			<s:TextArea id="solutionPencil" width="214" height="51" keyUp="setSolutionsPencil(event)"/>
		</s:HGroup>
	</s:VGroup>
	
	<s:VGroup includeIn="tools" x="16" y="132" width="733">
		<s:HGroup width="732">
			<s:Image source="assets/eye.png"/>
			<s:Spacer width="79" height="10"/>
			<s:TextArea id="toolsEye" width="610" height="55" keyUp="setToolsEye(event)"/>
		</s:HGroup>
		
		<s:HGroup width="733">
			<s:Image source="assets/mouth.png"/>
			<s:Spacer width="95" height="10"/>
			<s:TextArea id="toolsEar" width="214" height="51" keyUp="setToolsSpeak(event)"/>
		</s:HGroup>
		
		<s:HGroup width="732">
			<s:Image source="assets/ear.png"/>
			<s:Spacer width="106" height="10"/>
			<s:TextArea id="toolsSpeak" width="214" height="51" keyUp="setToolsEar(event)"/>
		</s:HGroup>
		
		<s:HGroup width="733">
			<s:Image source="assets/hand.png"/>
			<s:Spacer width="98" height="10"/>
			<s:TextArea id="toolsHand" width="214" height="51" keyUp="setToolsHand(event)"/>
		</s:HGroup>
		
		<s:HGroup width="734">
			<s:Image source="assets/pencil.png"/>
			<s:Spacer width="98" height="10"/>
			<s:TextArea id="toolsPencil" width="214" height="51" keyUp="setToolsPencil(event)"/>
		</s:HGroup>
	</s:VGroup>
	

</s:View>
